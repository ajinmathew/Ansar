from scapy.all import rdpcap, IP, TCP, UDP, Ether

def analyze_pcap(file_path):
    packets = rdpcap(file_path)
    
    for packet in packets:
        # Ethernet layer (MAC addresses)
        if Ether in packet:
            src_mac = packet[Ether].src
            dst_mac = packet[Ether].dst
            print(f"Source MAC: {src_mac}, Destination MAC: {dst_mac}")
        
        # IP layer
        if IP in packet:
            ip_src = packet[IP].src
            ip_dst = packet[IP].dst
            ttl = packet[IP].ttl
            print(f"Source IP: {ip_src}, Destination IP: {ip_dst}, TTL: {ttl}")
        
        # Packet Length
        packet_length = len(packet)
        print(f"Packet Length: {packet_length}")
        
        # Protocols: TCP/UDP
        if TCP in packet:
            protocol = "TCP"
            src_port = packet[TCP].sport
            dst_port = packet[TCP].dport
            flags = packet[TCP].flags
            print(f"Protocol: {protocol}")
            print(f"Source Port: {src_port}, Destination Port: {dst_port}")
            print(f"TCP Flags: {flags}")

        elif UDP in packet:
            protocol = "UDP"
            src_port = packet[UDP].sport
            dst_port = packet[UDP].dport
            print(f"Protocol: {protocol}")
            print(f"Source Port: {src_port}, Destination Port: {dst_port}")

        else:
            protocol = "Other"
            src_port = None
            dst_port = None
            print(f"Protocol: {protocol}")
        
        # Application Layer Data
        if packet.haslayer('Raw'):
            app_data = packet['Raw'].load
            print(f"Application Data: {app_data[:50]}...")  # Only printing the first 50 bytes for brevity
        
        print("-" * 40)

if __name__ == "__main__":
    pcap_file = "/home/kali/nmap-scan2.pcap"  # replace with your .pcap file
    analyze_pcap(pcap_file)
